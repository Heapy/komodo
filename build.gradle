plugins {
    id("jacoco")
    id("org.jetbrains.kotlin.jvm").version("1.3.0").apply(false)
    id("io.spring.dependency-management").version("1.0.6.RELEASE").apply(false)
    id("com.jfrog.bintray").version("1.8.4").apply(false)
    id("org.jetbrains.dokka").version("0.9.17").apply(false)
}

allprojects {
    repositories {
        jcenter()
        maven { url = uri("https://dl.bintray.com/kotlin/kotlin-eap/") }
        maven { url = uri("https://dl.bintray.com/heapy/heap/") }
    }
}

subprojects {
    apply(plugin: "jacoco")
    apply(plugin: "kotlin")
    apply(plugin: "io.spring.dependency-management")

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    test {
        useJUnitPlatform()

        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/moduleTestsCoverage.exec")
            includeNoLocationClasses = true
            excludes = ['jdk.internal.*']
        }
    }

    compileKotlin {
        kotlinOptions.freeCompilerArgs += [
                "-progressive",
                "-Xuse-experimental=kotlin.Experimental"
        ]
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.freeCompilerArgs += [
                "-progressive",
                "-Xuse-experimental=kotlin.Experimental"
        ]
        kotlinOptions.jvmTarget = "1.8"
    }

    dependencyManagement {
        dependencies {
            // core
            dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion")

            dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinxCoroutines")

            // integrations
            dependency("io.undertow:undertow-core:$undertowVersion")
            dependency("org.apache.httpcomponents:httpasyncclient:$apacheHttpClientVersion")
            dependency("com.zaxxer:HikariCP:$hikariCPVersion")
            dependency("org.slf4j:slf4j-api:$slf4jVersion")
            dependency("org.slf4j:slf4j-simple:$slf4jVersion")

            // tests
            dependency("org.junit.jupiter:junit-jupiter-api:$junitVersion")
            dependency("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
            dependency("org.junit.platform:junit-platform-engine:$junitPlatformVersion")
            dependency("io.mockk:mockk:$mockkVersion")
        }
    }
}

jacoco {
    toolVersion = "0.8.2"
}

task jacocoMergeSubprojectResultsIntoRootOne(type: JacocoMerge) {
    destinationFile = file("$buildDir/jacoco/rootTestsCoverage.exec")
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/moduleTestsCoverage.exec')
}

task jacocoMerge(dependsOn: ['jacocoMergeSubprojectResultsIntoRootOne'])

task jacocoRootReport(type: JacocoReport, dependsOn: "jacocoMerge") {
    reports {
        xml.setEnabled(true)
        html.setEnabled(true)
        xml.setDestination(file("${buildDir}/reports/jacoco/report.xml"))
    }
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files("$buildDir/jacoco/rootTestsCoverage.exec")
}
